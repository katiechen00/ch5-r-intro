title <- "T Distribution with 5 degree of freedom"
n.list <- c(2, 3, 5, 10, 25, 50, 100, 200)
for(n in n.list){
rec <- rep(0, 10000)
for(i in 1:10000){
rec[i] <- mean(rt(n = n, df = 5))
}
hist(rec[rec < 5 & rec > -5], main = title, freq = F, xlab = "x bar", xlim = c(-5, 5))
mtext(paste("N = ", n, sep = ""))
lines(seq(-5,5, by = 1/(n * 100)),
dnorm(seq(-5,5 by = 1/(n * 100)), mean = mu,
sd = sigma / sqrt(n)), col = "red")
}
n <- 10
p <- .5
mu <- p
sigma <- sqrt(p * (1-p))
p.hat <- rbinom(n = 10000, size = n, prob = p) / n
lower <- p.hat - 1.96 * sqrt(p.hat * (1 - p.hat)/n)
upper <- p.hat + 1.96 * sqrt(p.hat * (1 - p.hat)/n)
CI. cover <- (lower < p) & (upper > p)
n <- 10
p <- .5
mu <- p
sigma <- sqrt(p * (1-p))
p.hat <- rbinom(n = 10000, size = n, prob = p) / n
lower <- p.hat - 1.96 * sqrt(p.hat * (1 - p.hat)/n)
upper <- p.hat + 1.96 * sqrt(p.hat * (1 - p.hat)/n)
CI.cover <- (lower < p) & (upper > p)
n <- 10
p <- .5
mu <- p
sigma <- sqrt(p * (1-p))
p.hat <- rbinom(n = 10000, size = n, prob = p) / n
lower <- p.hat - 1.96 * sqrt(p.hat * (1 - p.hat)/n)
upper <- p.hat + 1.96 * sqrt(p.hat * (1 - p.hat)/n)
CI.cover <- (lower < p) & (upper > p)
random.plot <- sample(1:10000, 100)
plot(-1, -1, xlim = c(0,1), ylim = c(0, 100), ylab = "",
yaxt = "n", xlab = "Confidence Interval",
main = paste("Confidence Intervals for p = ", p, sep = ""))
abline(v = p, col = "black", lwd = 2)
segments(lower[random.plot], c(1:100),
upper[random.plot], c(1:100),
col = ifelse(CI.cover[random.plot], "black", "red"))
points(p.hat[random.plot],
c(1:100), col = ifelse(CI.cover[random.plot], "black", "red"),
pch = 19)
mtext(paste(round(mean(CI.cover), 3),
" of all CI's cover ", p, sep = ""))
n <- 1000
p <- .5
mu <- p
sigma <- sqrt(p * (1-p))
p.hat <- rbinom(n = 10000, size = n, prob = p) / n
lower <- p.hat - 1.96 * sqrt(p.hat * (1 - p.hat)/n)
upper <- p.hat + 1.96 * sqrt(p.hat * (1 - p.hat)/n)
CI.cover <- (lower < p) & (upper > p)
random.plot <- sample(1:10000, 100)
plot(-1, -1, xlim = c(0,1), ylim = c(0, 100), ylab = "",
yaxt = "n", xlab = "Confidence Interval",
main = paste("Confidence Intervals for p = ", p, sep = ""))
abline(v = p, col = "black", lwd = 2)
segments(lower[random.plot], c(1:100),
upper[random.plot], c(1:100),
col = ifelse(CI.cover[random.plot], "black", "red"))
points(p.hat[random.plot],
c(1:100), col = ifelse(CI.cover[random.plot], "black", "red"),
pch = 19)
mtext(paste(round(mean(CI.cover), 3),
" of all CI's cover ", p, sep = ""))
n <- 10000
p <- .5
mu <- p
sigma <- sqrt(p * (1-p))
p.hat <- rbinom(n = 10000, size = n, prob = p) / n
lower <- p.hat - 1.96 * sqrt(p.hat * (1 - p.hat)/n)
upper <- p.hat + 1.96 * sqrt(p.hat * (1 - p.hat)/n)
CI.cover <- (lower < p) & (upper > p)
random.plot <- sample(1:10000, 100)
plot(-1, -1, xlim = c(0,1), ylim = c(0, 100), ylab = "",
yaxt = "n", xlab = "Confidence Interval",
main = paste("Confidence Intervals for p = ", p, sep = ""))
abline(v = p, col = "black", lwd = 2)
segments(lower[random.plot], c(1:100),
upper[random.plot], c(1:100),
col = ifelse(CI.cover[random.plot], "black", "red"))
points(p.hat[random.plot],
c(1:100), col = ifelse(CI.cover[random.plot], "black", "red"),
pch = 19)
mtext(paste(round(mean(CI.cover), 3),
" of all CI's cover ", p, sep = ""))
confidence.level <- .95
qnorm((1 0 confidence.level)/2)
confidence.level <- .95
qnorm((1 - confidence.level)/2)
qnorm?
rbinom(n = 5, size = 3, prob = .2)
rbinom(n = 5, size = 3, prob = .2)
dbinom(5, size = 3, prob = .2)
dbinom(3, size = 5, prob = .2)
pbinom(3, size = 5, prob = .2)
ep7 <- unlist(read.csv("http://www.stat.washington.edu/~ysamwang/notes/ep7.csv", header =
hist(ep7, freq = F, main = "IMDB Ratings for Episode 7", breaks = c(0:10))
10
F))
set.seed(10101)
ep7 <- unlist(read.csv("http://www.stat.washington.edu/~ysamwang/notes/ep7.csv", header = F))
ep6 <- unlist(read.csv("http://www.stat.washington.edu/~ysamwang/notes/ep6.csv", header = F))
ep7.subsample <- sample(ep7, 500)
ep6.subsample <- sample(ep6, 300)
mu(esp6. subsample)
mean(esp6. subsample)
mean(ep6. subsample)
mu(ep6. subsample)
mean(ep7.subsample)
mean(ep6.subsample)
mean(ep6.subsample) - mean(ep7.subsample)
n <- length(ep7.subsample)
n
?se
var(ep6.subsample)
se <- sqrt(var(ep6.subsample) / 300 + var(ep7.subsample) / 500)
se
confidence.level <- .95
qnorm((1 - confidence.level) / 2)
-1.959964 * .95
1.96 * 0.1154913
0.04333333 - 0.2263629
0.04333333 + 0.2263629
confidence.level <- .975
qnorm((1 - confidence.level) / 2)
multiplier <- -qt(.05, df = 300-1)
multiplier
multiplier <- -qt(.025, df = 300-1)
multiplier
multiplier <- -qt(.1, df = 300-1)
multiplier
multiplier <- -qt(.1, df = 500-1)
multiplier
multiplier <- -qt(.05, df = 500-1)
multiplier
multiplier <- -qt(.025, df = 300-1)
multiplier
0.04333333 - 1.96793 * 0.1154913
0.04333333 + 1.96793 * 0.1154913
install.packages("rvest")
install.packages("RCurl")
library(rvest, RCurl)
url.drake <- "http://www.azlyrics.com/d/drake.html"
song.list.drake <- read_html(url.drake)
links.drake <- html_attr(html_nodes(html_nodes(song.list.drake, "#listAlbum"), "a"), "href
links.drake <- links.drake[which(sapply(links.drake, substr, 0, 2) == "..")]
links.drake <- html_attr(html_nodes(html_nodes(song.list.drake, "#listAlbum"), "a"), "href")
links.drake <- links.drake[which(sapply(links.drake, substr, 0, 2) == "..")]
add.url <- function(link){
gsub("..", "http://www.azlyrics.com", link, fixed = T)
}
full.links.drake <- unname(sapply(links.drake, add.url))
site.to.lyrics <- function(url){
song <- read_html(url)
lyrics.raw <- html_text(html_nodes(song, "div")[23])
lyrics.intermediate <- gsub("\n", " ", lyrics.raw, fixed = T )
lyrics.intermediate <- gsub("\r", " ", lyrics.intermediate, fixed = T )
lyrics.intermediate <- gsub("(", "", lyrics.intermediate, fixed = T )
lyrics.intermediate <- gsub(")", "", lyrics.intermediate, fixed = T )
lyrics.intermediate <- gsub("[[:punct:]]", "", lyrics.intermediate)
lyrics.intermediate <- gsub("\\[[^\\]]*\\]", "", lyrics.intermediate, perl=TRUE)
word.tokens <- unlist(strsplit(lyrics.intermediate, " "))
word.tokens <- word.tokens[word.tokens != ""]
word.tokens <- tolower(word.tokens)
return(word.tokens)
}
head(site.to.lyrics(full.links.drake[177]))
set.seed(10101)
subsample.drake <- sample(full.links.drake, 50)
complete.list.drake <- c()
for(url in subsample.drake){
complete.list.drake <- c(complete.list.drake , site.to.lyrics(url))
Sys.sleep(3)
}
complete.list.drake <- c()
for(url in subsample.drake){
complete.list.drake <- c(complete.list.drake , site.to.lyrics(url))
Sys.sleep(3)
}
complete.list.drake <- c()
for(url in subsample.drake){
complete.list.drake <- c(complete.list.drake , site.to.lyrics(url))
Sys.sleep(3)
}
complete.list.drake <- c()
for(url in subsample.drake){
complete.list.drake <- c(complete.list.drake , site.to.lyrics(url))
Sys.sleep(3)
}
complete.list.drake <- c()
for(url in subsample.drake){
complete.list.drake <- c(complete.list.drake , site.to.lyrics(url))
Sys.sleep(3)
}
word.counts.drake <- table(complete.list.drake)
head(sort(word.counts.drake, decreasing = T))
unique(complete.list.drake)
length(complete.list.drake)
length(unique(complete.list.drake))
"joint" %in% complete.list.drake
summary.statistics.drake <- rep(0, length(subsample.drake))
for(i in 1:length(subsample.drake)){
Sys.sleep(3)
song.lyrics <- site.to.lyrics(subsample.drake[i])
summary.statistics.drake[i] <- "money" %in% song.lyrics
}
summary.statistics.drake <- rep(0, length(subsample.drake))
for(i in 1:length(subsample.drake)){
Sys.sleep(3)
song.lyrics <- site.to.lyrics(subsample.drake[i])
summary.statistics.drake[i] <- "money" %in% song.lyrics
}
"money" %in% complete.list.drake
confidence.level <- .85
qnorm((1 - confidence.level) / 2)
confidence.level <- .975
qnorm((1 - confidence.level) / 2)
multiplier <- -qnorm(.15)
multiplier
multiplier <- -qnorm(.85)
multiplier
multiplier <- -qnorm(.15)
multiplier <- -qnorm(.05)
multiplier
multiplier <- -qnorm(.15)
multiplier
confidence.level <- .95
qnorm((1 - confidence.level) / 2)
confidence.level <- .90
qnorm((1 - confidence.level) / 2)
confidence.level <- .98
qnorm((1 - confidence.level) / 2)
confidence.level <- .99
qnorm((1 - confidence.level) / 2)
confidence.level <- .85
qnorm((1 - confidence.level) / 2)
confidence.level <- .68
qnorm((1 - confidence.level) / 2)
confidence.level <- .92
qnorm((1 - confidence.level) / 2)
summary.statistics.drake <- rep(0, length(subsample.drake))
subsample.drake
for(i in 1:length(subsample.drake)){
Sys.sleep(3)
song.lyrics <- site.to.lyrics(subsample.drake[i])
summary.statistics.drake[i] <- "money" %in% song.lyrics
}
summary.statistics.drake
mean(summary.statistics.drake)
23 / 50
for(i in 1:length(subsample.drake)){
Sys.sleep(3)
song.lyrics <- site.to.lyrics(subsample.drake[i])
summary.statistics.drake[i] <- length(unique(song.lyrics))
}
summary.statistics.drake
mean(summary.statistics.drake)
length(summary.statistics.drake)
sd(summary.statistics.drake)
multiplier <- -qt(.01, df = 49)
multiplier
multiplier <- -qt(.125, df = 49)
multiplier
multiplier <- -qt(.07, df = 49)
multiplier
url.meek <- "http://www.azlyrics.com/m/meekmill.html"
song.list.meek <- read_html(url.meek)
links.meek <- html_attr(html_nodes(html_nodes(song.list.meek, "#listAlbum"), "a"), "href")
links.meek <- links.meek[which(sapply(links.meek, substr, 0, 2) == "..")]
full.links.meek <- unname(sapply(links.meek, add.url))
set.seed(5555)
subsample.meek <- sample(full.links.meek, 35)
complete.list.meek <- c()
for(url in subsample.meek){
complete.list.meek <- c(complete.list.meek , site.to.lyrics(url))
Sys.sleep(3)
}
summary.statistics.meek <- rep(0, length(subsample.meek))
summary.statistics.meek
subsample.meek
for(i in 1:length(subsample.meek)){
Sys.sleep(3)
song.lyrics <- site.to.lyrics(subsample.meek[i])
summary.statistics.meek[i] <- length(unique(son.lyrics))
}
summary.statistics.meek <- rep(0, length(subsample.meek))
for(i in 1:length(subsample.meek)){
Sys.sleep(3)
song.lyrics <- site.to.lyrics(subsample.meek[i])
summary.statistics.meek[i] <- length(unique(song.lyrics))
}
summary.statistics.meek
length(summary.statistics.meek)
mean(summary.statistics.meek)
var(summary.statistics.drake)
var(summary.statistics.meek)
multiplier <- -qt(.025, df = 34)
multiplier
multiplier <- -qt(.025, df = 40)
multiplier
pt(-0.904, df = 34)
deflate <- read.csv("http://www.stat.washington.edu/~ysamwang/notes/deflategate.csv")
names(deflate)
avg.pat <- mean(deflate$PressureDrop[deflate$Team == "Patriots"])
s.pat <- sd(deflate$PressureDrop[deflate$Team == "Patriots"])
avg.colts <- mean(deflate$PressureDrop[deflate$Team == "Colts"])
s.colts <- sd(deflate$PressureDrop[deflate$Team == "Colts"])
test.stat <- (avg.pat - avg.colts) / sqrt(s.pat^2 / 11 + s.colts^2 / 4)
test.stat
pt(test.stat, df = 3)
pt(-0.904, df = 34)
pt(0.904, df = 34)
pt(-1.99, df = 40.47)
pt(1.99, df = 40.47)
qt(.05, df = 144)
qt(.05, df = 146)
qnorm(.05, df = 146)
qnorm(.05)
pnorm(-1.645)
qnorm(.06)
pnorm(-1.143)
pnorm(1.645)
pt(1.00, df = 24)
pnorm(-1.645)
pnorm(1)
1-0.8413447
pnorm(-.5)
pnorm(.01)
qnorm(.05)
qnorm(.01)
pnorm(-3.261)
pnorm(-4.938)
pnorm(-1.645)
pnorm(-3.261)
1-pnorm(-4.938)
wine <- read.csv("http://www.stat.washington.edu/~ysamwang/notes/wine.csv")
mean(wines)
pt(1.99)
names(wine)
reg.model <- lm(log(Final.Price, 10) ~ Rating.Score, data = wine)
reg.model$coeff
sse <- sum((reg.model$residual)^2)
s.reg <- sqrt(sse / (length(wine$Rating.Score) - 2))
s.reg
length(wine$Rating.Score)
se(fit) <- s.reg * sqrt(1 / length(wine$Rating.Score) + (92 - mean(wine$Rating.Score) ^ 2 / sum((wine$Rating.Score - mean(wine$Rating.Score))^2)))
se.fit <- s.reg * sqrt(1 / length(wine$Rating.Score) + (92 - mean(wine$Rating.Score) ^ 2 / sum((wine$Rating.Score - mean(wine$Rating.Score))^2)))
se.fit
se.fit <- s.reg * sqrt(1 / length(wine$Rating.Score) + (92 - mean(wine$Rating.Score) ^ 2 / sum((92 - mean(wine$Rating.Score))^2)))
se.fit <- s.reg * sqrt(1 / length(wine$Rating.Score) + (wine$Rating.Score - mean(wine$Rating.Score) ^ 2 / sum((wine$Rating.Score - mean(wine$Rating.Score))^2)))
se.fit
se.fit <- s.reg * sqrt(1 / length(wine$Rating.Score) + (92 - mean(wine$Rating.Score) ^ 2 / sum((wine$Rating.Score - mean(wine$Rating.Score))^2)))
se.fit
qt(.05, df = 2785)
pnorm(.29)
pnorm(-1.23)
y.hat <- -7.24223284 + 0.09473564 * 92
y.hat
predictive <- y.hat + 1.645401 * sqrt(s.reg^2 + se.fit^2)
predictive
y.hat <- -7.24223284 - 0.09473564 * 92
predictive <- y.hat - 1.645401 * sqrt(s.reg^2 + se.fit^2)
predictive
dat <- log(wine$Final.Price[which(wine$Rating.Score == 92)])
dat
se.fit <- s.reg * sqrt(1 / length(wine$Rating.Score) + (92 - mean(wine$Rating.Score)) ^ 2 / sum((wine$Rating.Score - mean(wine$Rating.Score))^2)))
se.fit <- s.reg * sqrt(1 / length(wine$Rating.Score) + (92 - mean(wine$Rating.Score)) ^ 2 / sum((wine$Rating.Score - mean(wine$Rating.Score))^2))
se.fit
predictive <- y.hat - 1.645401 * sqrt(s.reg^2 + se.fit^2)
predictive
predictive <- y.hat + 1.645401 * sqrt(s.reg^2 + se.fit^2)
predictive
qt(.05, df = 2785)
y.hat <- -7.24223284 + 0.09473564 * 92
predictive <- y.hat + 1.645401 * sqrt(s.reg^2 + se.fit^2)
predictive
predictive <- y.hat - 1.645401 * sqrt(s.reg^2 + se.fit^2)
predictive
dat <- log(wine$Final.Price[which(wine$Rating.Score == 92)], 10)
dat
dat > 1.136524
dat > 1.136524 $ dat < 1.810368
dat > 1.136524 & dat < 1.810368
mean(dat > 1.136524 & dat < 1.810368)
wine <- read.csv("http://www.stat.washington.edu/~ysamwang/notes/wine.csv")
reg.model <- lm(log(Final.Price, 10) ~ Rating.Score, data = wine)
sse <- sum((reg.model$residual)^2)
s.reg <- sqrt(sse / (length(wine$Rating.Score) - 2))
s.reg
se.fit <- s.reg * sqrt(1 / length(wine$Rating.Score) + (92 - mean(wine$Rating.Score))^2 / sum((wine$Rating.Score - mean(wine$Rating.Score))^2))
se.fit
length(wine$Rating.Score)
y.hat <- -7.242233 + 0.094736 * 92
y.hat
y.hat <- -7.242233 + 0.094736 * 92
multiplier <- qt(.05, df = length(wine$Rating.Score) - 2)
multiplier
multiplier <- -qt(.05, df = length(wine$Rating.Score) - 2)
multiplier
lower <- y.hat - multiplier * sqrt(s.reg^2 + se.fit^2)
lower
upper <- y.hat + multiplier * sqrt(s.reg^2 + se.fit^2)
upper
which(wine$Rating.Score = 92)
which(wine$Rating.Score == 92)
length(wine$Rating.Score)
data <- log(Final.Price[which(wine$Rating.Score == 92)], 10)
data <- log(wine$Final.Price[which(wine$Rating.Score == 92)], 10)
data
data > 1.136557 & data < 1.810401
mean(data > 1.136557 & data < 1.810401)
length(data)
multiplier <- pt(.025, df = length(wine$Rating.Score) - 2)
multiplier
multiplier <- qt(.025, df = length(wine$Rating.Score) - 2)
multiplier
multiplier <- -qt(.025, df = length(wine$Rating.Score) - 2)
multiplier
multiplier.confidence <- -qt(.025, df = length(wine$Rating.Score) - 2)
multiplier.confidence
multiplier
lower <- y.hat - multiplier.confidence * se.fit
lower
upper <- y.hat + multiplier.confidence * se.fit
upper
y.hat
se.fit
qt(.975, df = length(wine$Rating.Score))
mean(data >= 1.136557 & data <= 1.810401)
qt(.95, length(wine$Rating.Score))
pt(1.960816, df = length(wine$Rating.Score))
qnorm(.025)
qnorm(.05)
qt(.025, df = 73)
qt(.05, df = 73)
qt(.1, df = 9)
qt(.9, df = 9)
deflate <- read.csv("http://www.stat.washington.edu/~ysamwang/notes/deflategate.csv")
names(deflate)
avg.pat <- mean(deflate$PressureDrop[deflate$Team == "Patriots"])
s.pat <- sd(deflate$PressureDrop[deflate$Team == "Patriots"])
avg.pat <- mean(deflate$PressureDrop[deflate$Team == "Patriots"])
s.pat <- sd(deflate$PressureDrop[deflate$Team == "Patriots"])
avg.colts <- mean(deflate$PressureDrop[deflate$Team == "Colts"])
s.colts <- sd(deflate$PressureDrop[deflate$Team == "Colts"])
test.stat <- (avg.pat - avg.colts) / sqrt(s.pat^2 / 11 + s.colts^2 / 4)
test.stat
pt(test.stat, df = 3)
pnorm(-2.31)
1-pnorm(-2.31)
1-pnorm(2.31)
pt(-3.376, df = 23)
qt(.05, df = 23)
pt(-.789, df = 289)
1-pt(-.789, df = 289)
dbinorm(5, 20, .08)
dbinom(5, 20, .08)
install.packages("swirl")
library(swirl)
Ls()
ls()
rm(list=ls())
install_course("Statistical_Inference")
library(swirl)
swirl()
0.02048
0.43008
info()
0.43008
0.43
1.29024
0.69632
0.94208
pbinom(2, size=5, prob=0.8, lower.tail = FALSE)
qnorm(0.1)
-2
0
qnorm(97.5, mean=3, sd=2)
qnorm(.975, mean=3,sd=2)
1.96
1.96*2 + 3
pnorm(1200, mean = 1020, sd = 50, lower.tail = FALSE)
(1200-1020)/50
pnorm(3.6, lower.tail = FALSE)
pnorm((1200-1020)/50, lower.tail=FALSE)
qnorm(.75, mean=1020, sd=50, lower.tail=TRUE)
.53
.53
ppois(3, mean=2.5 * 4, 2.5, lower.rail=TRUE, log.p=FALSE)
ppois(3, mean=2.5 * 4)
ppois(3, 2.5)
ppois(3, 2.5 * 4)
pbinom(5, 1000, .01)
ppois(5, 10)
(5, 1000*.01)
ppois(5, 1000*.01)
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
